col.ind = group_x, # color by groups
palette = c("tan4", "gold",   "orange", "red2", "darkgreen", "limegreen"),
addEllipses = TRUE, # Concentration ellipses
legend.title = "Conditions"
)
c(rep("Roots", 8), rep("Leaves", 4))
fviz_pca_ind(pca,
geom.ind = c("point"), # show points only (nbut not "text")
col.ind = c(rep("Roots", 8), rep("Leaves", 4)), # color by groups
palette = c("tan4", "gold",   "orange", "red2", "darkgreen", "limegreen"),
addEllipses = TRUE, # Concentration ellipses
legend.title = "Conditions"
)
fviz_pca_ind(pca,
geom.ind = c("text"), # show points only (nbut not "text")
col.ind = c(rep("Roots", 8), rep("Leaves", 4)), # color by groups
palette = c("tan4", "gold",   "orange", "red2", "darkgreen", "limegreen"),
addEllipses = TRUE, # Concentration ellipses
legend.title = "Conditions"
)
dge <- calcNormFactors(dge, method = "TMM")
counts <- cpm(dge$counts)
pca <- PCA(t(counts))
samples <- c("Control Roots", "Roots infected 48h", "Roots Infected 7d", "Roots Infected 15d","Control Leaves", "Leaves infected 15d")
group_x <- rep(factor(samples, levels = samples), each=2)
fviz_pca_ind(pca,
geom.ind = c("text"), # show points only (nbut not "text")
col.ind = c(rep("Roots", 8), rep("Leaves", 4)), # color by groups
palette = c("tan4", "darkgreen"),
addEllipses = TRUE, # Concentration ellipses
legend.title = "Conditions"
)
fviz_pca_ind(pca,
geom.ind = c("point"), # show points only (nbut not "text")
col.ind = c(rep("Roots", 8), rep("Leaves", 4)), # color by groups
palette = c("tan4", "darkgreen"),
addEllipses = TRUE, # Concentration ellipses
legend.title = "Conditions",
title = "PCA"
)
fviz_pca_ind(pca,
geom.ind = c("point"), # show points only (nbut not "text")
col.ind = c(rep("Roots", 8), rep("Leaves", 4)), # color by groups
palette = c("tan4", "darkgreen"),
addEllipses = TRUE, # Concentration ellipses
legend.title = "Tissue",
title = "PCA"
)
dge <- calcNormFactors(dge, method = "TMM")
counts <- cpm(dge$counts)
pca <- PCA(t(counts))
samples <- c("Control Roots", "Roots infected 48h", "Roots Infected 7d", "Roots Infected 15d","Control Leaves", "Leaves infected 15d")
group_x <- rep(factor(samples, levels = samples), each=2)
fviz_pca_ind(pca,
geom.ind = c("point"), # show points only (nbut not "text")
col.ind = c(rep("Roots", 8), rep("Leaves", 4)), # color by groups
palette = c( "darkgreen", "tan4"),
addEllipses = TRUE, # Concentration ellipses
legend.title = "Tissue",
title = "PCA"
)
source('~/Desktop/BIOINFO/Olea_Proyect/NCBI_genome/edgeR_anaylisis/topGO_script.R', echo=TRUE)
View(allRes)
source('~/Desktop/BIOINFO/Olea_Proyect/NCBI_genome/edgeR_anaylisis/topGO_script.R', echo=TRUE)
View(allRes)
source('~/Desktop/BIOINFO/Olea_Proyect/NCBI_genome/edgeR_anaylisis/topGO_script.R', echo=TRUE)
source('~/Desktop/BIOINFO/Olea_Proyect/NCBI_genome/edgeR_anaylisis/topGO_script.R', echo=TRUE)
source('~/Desktop/BIOINFO/Olea_Proyect/NCBI_genome/edgeR_anaylisis/topGO_script.R', echo=TRUE)
source('~/Desktop/BIOINFO/Olea_Proyect/NCBI_genome/edgeR_anaylisis/topGO_script.R', echo=TRUE)
View(allRes)
source('~/Desktop/BIOINFO/Olea_Proyect/NCBI_genome/edgeR_anaylisis/topGO_script.R', echo=TRUE)
source('~/Desktop/BIOINFO/Olea_Proyect/NCBI_genome/edgeR_anaylisis/topGO_script.R', echo=TRUE)
write.table(allRes, file = "./GO_results/BP
.csv")
######################################
######################################
# Extracting associated to a GO term
# ann.genes <- genesInTerm(GOdata)
# ann.genes <- genesInTerm(GOdata)
# str(ann.genes)
# ann.genes <- genesInTerm(GOdata)
# str(ann.genes)
#
# ann.genes <- genesInTerm(GOdata)
# str(ann.genes)
#
# KS.go <- names(sort(score(resultKS.elim))[1:50])
# ann.genes <- genesInTerm(GOdata)
# str(ann.genes)
#
# KS.go <- names(sort(score(resultKS.elim))[1:50])
# KS.ann.genes <- genesInTerm(GOdata, whichGO=KS.go)
source('~/Desktop/BIOINFO/Olea_Proyect/NCBI_genome/edgeR_anaylisis/topGO_script.R', echo=TRUE)
knitr::opts_chunk$set(echo = TRUE)
# Limpiamos el entorno de variables
rm (list = ls ())
# Instalamos este gestor de paquetes que es bastante eficiente
#install.packages("pacman")
pacman::p_load(edgeR, Glimma)
pacman::p_load(limma)
pacman::p_load(RColorBrewer)
pacman::p_load(GenomicFeatures)
matrix_counts <- read.delim("../matrix_accounts/matrix_count_geneID.txt",
row.names="Geneid",
comment.char="#")
# Sumamos las columnas de las replicas tecnicas por cada condición
SraRunTable <- read.csv("../matrix_accounts/SraRunTable.csv")
SraRunTable <- SraRunTable[seq(1,12),]
# Creación del objeto DGEList
dge <- DGEList(counts = matrix_counts)
# Grupos
group <-as.factor(
rep(c("ControlRoots","RootInfect48h", "RootInfect07d", "RootInfect15d", "ControlLeaves", "LeafInfect15d"),
each =2)
)
group <- factor(
group,
levels= c("ControlRoots","RootInfect48h", "RootInfect07d", "RootInfect15d", "ControlLeaves","LeafInfect15d"))
dge$samples$group <- group
# Arreglar annotaciones
annot <- read.delim("olea_annotation.csv",sep = ",")
genes <-annot[,c("EntrezID","GeneName", "Protein","GO_terms")]
#rownames(annot) <- protein_annot$GeneID
genes <- genes[!duplicated(genes$EntrezID),]
urlNCBI = ifelse(genes$GeneName=="NA", NA,
paste("<a href='http://www.ncbi.nlm.nih.gov/gene/?term=",genes$GeneName,"'>",genes$GeneName,"</a>",sep=""))
urlKEGG = ifelse(genes$EntrezID =="NA", NA,
paste("<a href='https://www.genome.jp/dbget-bin/www_bget?oeu:",genes$EntrezID,"'>","oeu:",genes$EntrezID,"</a>",sep=""))
genes$GeneName <- urlNCBI
genes$KEGG <- urlKEGG
rownames(genes) <- genes$EntrezID
rm(urlNCBI, urlKEGG)
# Añadimos las anotaciones al objeto DGE
dge$counts <- matrix_counts[rownames(genes),] # elimamos de la mc los genes sin anotaciones
dge$genes <- genes[rownames(dge), 1:5]
rm(matrix_counts, SraRunTable)
dge <- dge[rowSums(cpm(dge)>1) >= 2, , keep.lib.sizes=FALSE]
dim(dge)
pacman::p_load(factoextra)
pacman::p_load(FactoMineR)
dge <- sumTechReps(dge, ID=dge$samples$group)
dge <- calcNormFactors(dge, method = "TMM")
dge$samples$norm.factors
housekeeping <- c(111372741, 111386620, 111405060, 111393675, 111397761, 111396244,
111405236, 111384356, 111408661, 111394484, 111396638, 111383659,
111412389, 111399585, 111409889, 111397323, 111379122, 111369920,
111385724, 111367905)
housekeeping <- as.character(housekeeping)
y1 <- dge
y1$samples$group <- 1
y0 <- estimateDisp(y1[housekeeping,], trend = "none", tagwise = FALSE)
dge$common.dispersion <- y0$common.dispersion
dge$common.dispersion
pacman::p_load(tidyr)
pacman::p_load(dplyr)
pacman::p_load(ggplot2)
logCPM <- cpm(dge, prior.count=2, log=TRUE)
hk <- as.data.frame(logCPM[housekeeping,])
hk$housekeeping <- rownames(hk)
hk_n <- hk %>% tidyr::gather(key = "condition", value = "value", -housekeeping)
p <- ggplot(hk_n, aes(x= housekeeping, y=value)) +
geom_boxplot()+
theme_bw()
print(p)
pacman::p_load(tidyr)
pacman::p_load(dplyr)
pacman::p_load(ggplot2)
logCPM <- cpm(dge, prior.count=2, log=TRUE)
hk <- as.data.frame(logCPM[housekeeping,])
hk$housekeeping <- rownames(hk)
hk_n <- hk %>% tidyr::gather(key = "condition", value = "value", -housekeeping)
p <- ggplot(hk_n, aes(x= housekeeping, y=value)) +
geom_boxplot()+
theme_bw()
print(p)
group0 <- group[seq(1,12,2)]
design <- model.matrix(~0+group0)
colnames(design) <- gsub("group0", "", colnames(design))
design
# Leaf_late -> effect to V.dahlie infection at 15 days in leaves
# Root_early -> V.dhalie early respose
# Root_late -> response against opportunist microorganism
# Root_infectVScontrol -> common defense response both to V.dahliae and opportunist MO
contr.matrix <- makeContrasts(
leaf_late = LeafInfect15d - ControlLeaves,
Root_Early = RootInfect48h - ControlRoots,
Root_Late = (RootInfect15d + RootInfect07d)/2 - RootInfect48h,
Root_InfectvsCtrl = (RootInfect48h + RootInfect07d + RootInfect15d)/3 - ControlRoots,
levels = colnames(design)
)
contr.matrix
fit <- glmFit(dge, design)
#res <- glmLRT(fit, contrast =contr.matrix)
#res_L_late <- glmLRT(fit, contrast =contr.matrix[,"leaf_late"])
res_R_early  <- glmLRT(fit, contrast =contr.matrix[,"Root_Early"])
res_R_late  <- glmLRT(fit, contrast =contr.matrix[,"Root_Late"])
res_R_InfvsCtrl <- glmLRT(fit, contrast =contr.matrix[,"Root_InfectvsCtrl"])
# resumen del análisis
#topTags(res_R_7vs2, p.value = 0.5, n=50)
topTags(res_R_InfvsCtrl, n = Inf)
x <- topTags(res_R_InfvsCtrl, n = Inf)
x$table
x <- x$table
View(x)
plotSmear(res_R_InfvsCtrl, de.tags = "111375391")
read.delim
knitr::opts_chunk$set(echo = TRUE)
pacman::p_load(edgeR, Glimma)
pacman::p_load(limma)
pacman::p_load(RColorBrewer)
pacman::p_load(GenomicFeatures)
matrix_counts <- read.delim("../matrix_accounts/matrix_count_geneID.txt",
row.names="Geneid",
comment.char="#")
# Sumamos las columnas de las replicas tecnicas por cada condición
SraRunTable <- read.csv("../matrix_accounts/SraRunTable.csv")
SraRunTable <- SraRunTable[seq(1,12),]
View(SraRunTable)
SraRunTable <- read.csv("../matrix_accounts/SraRunTable.csv")
View(SraRunTable)
seq(1,12)
SraRunTable <- read.csv("../matrix_accounts/SraRunTable.csv")
View(SraRunTable)
# Matriz de conteos
head(matrix_counts)
# Grupos
group <-as.factor(
rep(c("ControlRoots","RootInfect48h", "RootInfect07d", "RootInfect15d", "ControlLeaves", "LeafInfect15d"),
each =2)
)
group <- factor(
group,
levels= c("ControlRoots","RootInfect48h", "RootInfect07d", "RootInfect15d", "ControlLeaves","LeafInfect15d"))
dge$samples$group <- group
View(SraRunTable)
SraRunTable <- SraRunTable[1:8,]
View(SraRunTable)
# Packages needed
install.packages("pacman")   # Packages manager
pacman::p_load(edgeR, limma) # DGE analysis
pacman::p_load(openxlsx)     # Save results as excel file,
#matrix count
matrix_counts <- read.delim("matrix_count_geneID.txt",
row.names="Geneid",
comment.char="#")
head(matrix_counts)
#matrix design
SraRunTable <- read.csv("SraRunTable.csv")
SraRunTable <- SraRunTable[1:8,] # Keeping only root samples
group <- rep(c("ControlRoots","RootInfect48h", "RootInfect07d", "RootInfect15d"),
each =2)
group <- factor(group, levels= group)
group
group
unique(group)
group <- factor(group, levels= unique(group))
# Annotations
annot <- read.delim("olea_annotation.csv", sep = ",")
genes <- annot[,c("EntrezID","GeneName", "Protein","GO_terms")]
genes <- genes[!duplicated(genes$EntrezID),]
urlNCBI = ifelse(genes$GeneName=="NA", NA,
paste("<a href='http://www.ncbi.nlm.nih.gov/gene/?term=",
genes$GeneName,
"'>",
genes$GeneName,
"</a>",
sep="")
)
urlKEGG = ifelse(genes$EntrezID =="NA", NA,
paste("<a href='https://www.genome.jp/dbget-bin/www_bget?oeu:",
genes$EntrezID,
"'>",
"oeu:",
genes$EntrezID,
"</a>",
sep="")
)
genes$GeneName <- urlNCBI
genes$KEGG <- urlKEGG
rownames(genes) <- genes$EntrezID
View(genes)
# DGEList-object
dge <- DGEList(counts = matrix_counts[rownames(genes),],
group = group)
group
matrix_counts <- matrix_counts[,1:8]
# DGEList-object
dge <- DGEList(counts = matrix_counts[rownames(genes),],
group = group)
dge$genes <- genes[rownames(dge), 1:5]
dge
# Removing genes that are lowly expressed
dge <- dge[rowSums(cpm(dge)>1) >= 2, , keep.lib.sizes=FALSE]
dim(dge)
# collapse technical replicates
dge <- sumTechReps(dge, ID=dge$samples$group)
# Normalization of raw data by TMM method
dge <- calcNormFactors(dge, method = "TMM")
dge$samples$norm.factors
housekeeping <- c(111372741, 111386620, 111405060, 111393675, 111397761, 111396244,
111405236, 111384356, 111408661, 111394484, 111396638, 111383659,
111412389, 111399585, 111409889, 111397323, 111379122, 111369920,
111385724, 111367905)
housekeeping <- as.character(housekeeping)
# checked housekeeping constant expression
logCPM <- cpm(dge, prior.count=2, log=TRUE)
logCPM[housekeeping,]
# Estimation of common dispersion
y1 <- dge
y1$samples$group <- 1
y0 <- estimateDisp(y1[housekeeping,], trend = "none", tagwise = FALSE)
dge$common.dispersion <- y0$common.dispersion
dge$common.dispersion
# Creating a design matrix and contrasts
group <- group[seq(1,8,2)]
design <- model.matrix(~0+group)
colnames(design) <- gsub("group", "", colnames(design))
design
contr.matrix <- makeContrasts(
Root_Early = RootInfect48h - ControlRoots,
Root_Late = (RootInfect15d + RootInfect07d)/2 - RootInfect48h,
Root_InfectvsCtrl = (RootInfect48h + RootInfect07d + RootInfect15d)/3 - ControlRoots,
levels = colnames(design)
)
contr.matrix
# Comparison
fit <- glmFit(dge, design)
res_R_early  <- glmLRT(fit, contrast =contr.matrix[,"Root_Early"])
res_R_late  <- glmLRT(fit, contrast =contr.matrix[,"Root_Late"])
res_R_InfvsCtrl <- glmLRT(fit, contrast =contr.matrix[,"Root_InfectvsCtrl"])
# Summary
topTags(res_R_early, p.value = 0.5, n=50)
list_of_datasets <- list("early-stage infection" = topTags(res_R_early, n = Inf),
"late-stage infection" = topTags(res_R_late, n = Inf),
"Common response" = topTags(res_R_InfvsCtrl, n = Inf)
)
write.xlsx(list_of_datasets, file = "DGE_res.xlsx", row.names=TRUE)
########################################
# 3.- Pathways enrichment analysis
########################################
keg_R_early <- topKEGG(kegga(res_R_early, species.KEGG="oeu",plot=F, trend = F),
n=25,
truncate=60)
keg_R_InfVsCtrl <- topKEGG(kegga(res_R_InfvsCtrl, species.KEGG="oeu", plot=F, trend = F),
n=25,
truncate=60)
list_of_datasets <- list("early-stage infection" = keg_R_early,
"late-stage infection" = keg_R_late,
"Common response" = keg_R_InfVsCtrl
)
keg_R_late <- topKEGG(kegga(res_R_late, species.KEGG="oeu",plot=F, trend = F),
n=25,
truncate=60)
write.xlsx(list_of_datasets, file = "KEGG_res.xlsx", row.names=TRUE)
setwd("~/Desktop/BIOINFO/Olea_Proyect/NCBI_genome/edgeR_anaylisis")
setwd("~/Desktop/New Folder")
source('~/Desktop/New Folder/DGE_script.R', echo=TRUE)
install.packages("pacman")
source('~/Desktop/New Folder/DGE_script.R', echo=TRUE)
source('~/Desktop/New Folder/DGE_script.R')
source('~/Desktop/New Folder/DGE_script.R')
install.packages("pacman")
source('~/Desktop/New Folder/DGE_script.R')
install.packages("pacman")
View(annot)
source('~/Desktop/New Folder/DGE_script.R')
source('~/Desktop/New Folder/DGE_script.R')
install.packages("pacman")
source('~/Desktop/New Folder/DGE_script.R')
source('~/Desktop/New Folder/DGE_script.R', echo=TRUE)
housekeeping <- c(111372741, 111386620, 111405060, 111393675, 111397761, 111396244,
111405236, 111384356, 111408661, 111394484, 111396638, 111383659,
111412389, 111399585, 111409889, 111397323, 111379122, 111369920,
111385724, 111367905)
housekeeping <- as.character(housekeeping)
# checked housekeeping constant expression
logCPM <- cpm(dge, prior.count = 2, log = TRUE)
logCPM[housekeeping, ]
# Estimation of common dispersion
y1 <- dge
y1$samples$group <- 1
y0 <- estimateDisp(y1[housekeeping,], trend = "none", tagwise = FALSE)
dge$common.dispersion <- y0$common.dispersion
dge$common.dispersion
# Creating a design matrix and contrasts
group <- group[seq(1,8,2)]
design <- model.matrix(~0 + group)
colnames(design) <- gsub("group", "", colnames(design))
design
contr.matrix <- makeContrasts(
Root_Early = RootInfect48h - ControlRoots,
Root_Late = (RootInfect15d + RootInfect07d)/2 - RootInfect48h,
Root_InfectvsCtrl = (RootInfect48h + RootInfect07d + RootInfect15d)/3 - ControlRoots,
levels = colnames(design)
)
contr.matrix
## Comparison
fit <- glmFit(dge, design)
design
# Creating a design matrix and contrasts
group <- group[seq(1,8,2)]
design <- model.matrix(~0 + group)
colnames(design) <- gsub("group", "", colnames(design))
design
source('~/Desktop/New Folder/DGE_script.R', echo=TRUE)
## Packages needed
#install.packages("pacman")  # Packages manager (Recommended)
pacman::p_load(edgeR, limma) # DGE analysis
pacman::p_load(openxlsx)     # Save results as excel file,
## Matrix count
matrix_counts <- read.delim("matrix_count_geneID.txt",
row.names = "Geneid",
comment.char = "#")
matrix_counts <- matrix_counts[ ,1:8] # Keeping only root samples
head(matrix_counts)
## Matrix design
SraRunTable <- read.csv("SraRunTable.csv")
SraRunTable <- SraRunTable[1:8, ] # Keeping only root samples
group <- rep(c("ControlRoots", "RootInfect48h", "RootInfect07d", "RootInfect15d"),
each =2)
group <- factor(group, levels= unique(group))
## Annotations
annot <- read.delim("olea_annotation.csv", sep = ",")
genes <- annot[,c("EntrezID", "GeneName", "Protein", "GO_terms")]
genes <- genes[!duplicated(genes$EntrezID),]
urlNCBI <- ifelse(genes$GeneName=="NA", NA,
paste("<a href='http://www.ncbi.nlm.nih.gov/gene/?term=",
genes$GeneName,
"'>",
genes$GeneName,
"</a>",
sep="")
)
urlKEGG <- ifelse(genes$EntrezID =="NA", NA,
paste("<a href='https://www.genome.jp/dbget-bin/www_bget?oeu:",
genes$EntrezID,
"'>",
"oeu:",
genes$EntrezID,
"</a>",
sep="")
)
genes$GeneName <- urlNCBI
genes$KEGG <- urlKEGG
rownames(genes) <- genes$EntrezID
## DGEList-object
dge <- DGEList(counts = matrix_counts[rownames(genes), ],
group = group)
dge$genes <- genes[rownames(dge), 1:5]
dge
# Removing genes that are lowly expressed
dge <- dge[rowSums(cpm(dge)>1) >= 2, , keep.lib.sizes=FALSE]
dim(dge)
# collapse technical replicates
dge <- sumTechReps(dge, ID = dge$samples$group)
# Normalization of raw data by TMM method
dge <- calcNormFactors(dge, method = "TMM")
dge$samples$norm.factors
housekeeping <- c(111372741, 111386620, 111405060, 111393675, 111397761, 111396244,
111405236, 111384356, 111408661, 111394484, 111396638, 111383659,
111412389, 111399585, 111409889, 111397323, 111379122, 111369920,
111385724, 111367905)
housekeeping <- as.character(housekeeping)
# checked housekeeping constant expression
logCPM <- cpm(dge, prior.count = 2, log = TRUE)
logCPM[housekeeping, ]
# Estimation of common dispersion
y1 <- dge
y1$samples$group <- 1
y0 <- estimateDisp(y1[housekeeping,], trend = "none", tagwise = FALSE)
dge$common.dispersion <- y0$common.dispersion
dge$common.dispersion
# Creating a design matrix and contrasts
group0 <- unique(group)
design <- model.matrix(~0 + group0)
colnames(design) <- gsub("group0", "", colnames(design))
design
contr.matrix <- makeContrasts(
Root_Early = RootInfect48h - ControlRoots,
Root_Late = (RootInfect15d + RootInfect07d)/2 - RootInfect48h,
Root_InfectvsCtrl = (RootInfect48h + RootInfect07d + RootInfect15d)/3 - ControlRoots,
levels = colnames(design)
)
contr.matrix
## Comparison
fit <- glmFit(dge, design)
res_R_early  <- glmLRT(fit, contrast = contr.matrix[,"Root_Early"])
res_R_late  <- glmLRT(fit, contrast = contr.matrix[,"Root_Late"])
res_R_InfvsCtrl <- glmLRT(fit, contrast = contr.matrix[,"Root_InfectvsCtrl"])
# Summary
DGE_res <- topTags(res_R_early, p.value = 0.5, n = 50)
head(DGE_res)
head(DGE_res$table)
list_of_datasets <- list("early-stage infection" = topTags(res_R_early, n = Inf),
"late-stage infection" = topTags(res_R_late, n = Inf),
"Common response" = topTags(res_R_InfvsCtrl, n = Inf)
)
write.xlsx(list_of_datasets, file = "DGE_res.xlsx", row.names=TRUE)
pacman::p_load(glimma)
pacman::p_load(Glimma)
source('~/Desktop/New Folder/DGE_script.R', echo=TRUE)
source('~/Desktop/New Folder/DGE_script.R', echo=TRUE)
knitr::stitch('DGE_script.r')
knitr::stitch('DGE_script.R')
R.home('bin')
R.home('bin')
sessionInfo()
install.packages("knitr")
install.packages("knitr")
knit_with_parameters('~/Desktop/New Folder/EdgeR.Rmd')
knit_with_parameters('~/Desktop/New Folder/EdgeR.Rmd')
unlink('EdgeR_cache', recursive = TRUE)
